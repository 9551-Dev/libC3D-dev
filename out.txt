diff --git a/common/parser_util.lua b/common/parser_util.lua
index b38a2c2..9b0e961 100644
--- a/common/parser_util.lua
+++ b/common/parser_util.lua
@@ -17,4 +17,22 @@ function parse.stack_trace(trace)
     return res
 end
 
+function parse.layout_attributes(input,expected_names)
+    local param_name,name_mapping = input:match("(.+)[%[% ](.+)]")
+
+    local mapped_names = {}
+    local n            = 1
+
+    for s in (name_mapping or ""):gmatch("[^;]+") do
+        mapped_names[n] = s
+        n = n + 1
+    end
+
+    for i=1,expected_names do
+        if not mapped_names[i] then mapped_names[i] = tostring(i) end
+    end
+
+    return param_name,mapped_names
+end
+
 return parse
\ No newline at end of file
diff --git a/common/string_util.lua b/common/string_util.lua
index 2f10521..e8c2434 100644
--- a/common/string_util.lua
+++ b/common/string_util.lua
@@ -72,4 +72,13 @@ function strings.ensure_line_size(str,width)
     return result_str
 end
 
+function strings.format_table__tostring(tbl)
+    local str = "<"
+    for k,v in next,tbl do
+        str = str .. k .. ":" .. v .. "; "
+    end
+
+    return str:gsub(";% $","") .. ">"
+end
+
 return strings
\ No newline at end of file
diff --git a/core/macro.lua b/core/macro.lua
new file mode 100644
index 0000000..e69de29
diff --git a/core/object.lua b/core/object.lua
index d56023c..a4597d5 100644
--- a/core/object.lua
+++ b/core/object.lua
@@ -8,7 +8,7 @@ local function make_methods(child)
             child = obj
             return obj
         end,
-        type = function() return child.obj_type end,
+        type = function() return child.obj_type or tostring(child) end,
     },{__tostring=function() return "object" end})
 end
 
diff --git a/core/objects/camera.lua b/core/objects/camera.lua
index dc36a7a..c972aa9 100644
--- a/core/objects/camera.lua
+++ b/core/objects/camera.lua
@@ -3,6 +3,8 @@ local euler_rotation_matrix   = require("core.3D.matrice.rotation_euler")
 local quat_rotation_matrix    = require("core.3D.matrice.rotation_quaternion")
 local lookat_transform_matrix = require("core.3D.matrice.lookat")
 
+local merge_transforms = require("core.3D.math.merge_transforms")
+
 return {add=function(BUS)
 
     return function()
@@ -14,7 +16,8 @@ return {add=function(BUS)
 
             camera_object:set_entry(c3d.registry.entry("set_position"),function(this,x,y,z)
                 this.position = camera_translate_matrix(-x,-y,-z)
-                this.transform = nil
+    
+                this.transform = merge_transforms(this.position,this.rotation)
                 return this
             end)
             camera_object:set_entry(c3d.registry.entry("set_rotation"),function(this,rx,ry,rz,w)
@@ -23,7 +26,9 @@ return {add=function(BUS)
                 else
                     this.rotation = quat_rotation_matrix(-rx,-ry,-rz,-w)
                 end
-                this.transform = nil
+
+                this.transform = merge_transforms(this.position,this.rotation)
+
                 return this
             end)
             camera_object:set_entry(c3d.registry.entry("set_transform"),function(this,transform)
@@ -36,9 +41,13 @@ return {add=function(BUS)
             end)
 
             camera_object:constructor(function()
+                local starting_position = camera_translate_matrix(0,0,0)
+                local starting_rotation = euler_rotation_matrix  (0,0,0)
+
                 return {
-                    rotation = euler_rotation_matrix(0,0,0),
-                    position = camera_translate_matrix(0,0,0)
+                    position  = starting_position,
+                    rotation  = starting_rotation,
+                    transform = merge_transforms(starting_position,starting_rotation)
                 }
             end)
         end
diff --git a/core/objects/generic_shape.lua b/core/objects/generic_shape.lua
index 1a34cc6..870bf28 100644
--- a/core/objects/generic_shape.lua
+++ b/core/objects/generic_shape.lua
@@ -25,7 +25,12 @@ return {add=function(BUS)
                 return BUS.object.scene_object.new(tbl_util.deepcopy(self,free_of_instantiation))
             end)
 
+            generic_shape_object:set_entry(c3d.registry.entry("cast"),function(self,pipeline)
+                self.casted = pipeline:cast_generic_shape_layout(self)
+            end)
+
             generic_shape_object:constructor(function(geometry)
+                geometry.casted = BUS.pipe.default:get_layout():cast_generic_shape_layout(geometry)
                 return geometry
             end)
         end
diff --git a/core/objects/imported_model.lua b/core/objects/imported_model.lua
index ba9a552..eca8c00 100644
--- a/core/objects/imported_model.lua
+++ b/core/objects/imported_model.lua
@@ -11,11 +11,11 @@ return {add=function(BUS)
 
             imported_model_object:set_entry(c3d.registry.entry("make_geometry"),function(this,scale)
                 scale = scale or 1
-                local ver = this.DATA.geometry.vertices
+                local ver = this.file_data.geometry.vertices
                 for i=1,#ver do
                     ver[i] = ver[i]*scale
                 end
-                return BUS.object.generic_shape.new(this.DATA)
+                return BUS.object.generic_shape.new(this.file_data)
             end)
 
             imported_model_object:define_decoder(".obj",obj_decode)
@@ -23,7 +23,7 @@ return {add=function(BUS)
             imported_model_object:constructor(function(path)
                 local obj = {}
 
-                obj.DATA = imported_model_object:read_file(path)
+                obj.file_data = imported_model_object:read_file(path)
 
                 return obj
             end)
diff --git a/core/objects/label.lua b/core/objects/label.lua
new file mode 100644
index 0000000..3784472
--- /dev/null
+++ b/core/objects/label.lua
@@ -0,0 +1,22 @@
+return {add=function(BUS)
+
+    return function()
+        local label = plugin.new("c3d:object->label")
+
+        function label.register_objects()
+            local label        = c3d.registry.get_object_registry()
+            local label_object = label:new_entry("label")
+
+
+            label_object:constructor(function()
+                return {
+                    vertex_properties = {},
+                    face_properties   = {},
+                    generated         = {}
+                }
+            end)
+        end
+
+        label:register()
+    end
+end}
\ No newline at end of file
diff --git a/core/objects/layout.lua b/core/objects/layout.lua
new file mode 100644
index 0000000..5aa2375
--- /dev/null
+++ b/core/objects/layout.lua
@@ -0,0 +1,54 @@
+return {add=function(BUS)
+
+    return function()
+        local layout = plugin.new("c3d:object->layout")
+
+        function layout.register_objects()
+            local layout        = c3d.registry.get_object_registry()
+            local layout_object = layout:new_entry("layout")
+
+            layout_object:set_entry(c3d.registry.entry("add_vertex_attribute"),function(self,name,count,mapper)
+                self.vertex_properties[name] = {
+                    value_amount = count,
+                    model_mapper = mapper
+                }
+            end)
+            layout_object:set_entry(c3d.registry.entry("add_face_attribute"),function(self,name,count,mapper)
+                self.face_properties[name] = {
+                    value_amount = count,
+                    model_mapper = mapper
+                }
+            end)
+
+            layout_object:set_entry(c3d.registry.entry("generate"),function(this)
+                -- generates the data getters for the pipeline
+            end)
+
+            layout:set_entry(c3d.registry.entry("cast_generic_shape_layout"),function(self,generic_shape)
+                -- casts a generic_shape to the layout using the provided generators and the layout data for optimization
+                local cast = {}
+
+                --[[
+                    local render_data = [CASTED]
+                    local face_datapoints = [CASTED]
+
+                    for face=1,#triangles do
+                        face_property_id = (i-1)*face_datapoints + 1;
+                    end
+                ]]
+
+                return cast
+            end)
+
+            layout_object:constructor(function()
+                return {
+                    vertex_properties = {},
+                    face_properties   = {},
+                    generated         = {}
+                }
+            end)
+        end
+
+        layout:register()
+    end
+end}
\ No newline at end of file
diff --git a/core/objects/pipeline.lua b/core/objects/pipeline.lua
index d4a08ee..715e275 100644
--- a/core/objects/pipeline.lua
+++ b/core/objects/pipeline.lua
@@ -13,237 +13,6 @@ local function build_pipeline()
 
         -- model render data
         local model_transform = model.transform
-
-        for i=1,triangle_count,3 do
-            -- grab render data
-            local vertex_a_index = triangles_indices[i]  *3
-            local vertex_b_index = triangles_indices[i+1]*3
-            local vertex_c_index = triangles_indices[i+2]*3
-
-            local vertex_a_x,vertex_a_y,vertex_a_z,vertex_a_w = vertices[vertex_a_index-2],vertices[vertex_a_index-1],vertices[vertex_a_index],1
-            local vertex_b_x,vertex_b_y,vertex_b_z,vertex_b_w = vertices[vertex_b_index-2],vertices[vertex_b_index-1],vertices[vertex_b_index],1
-            local vertex_c_x,vertex_c_y,vertex_c_z,vertex_c_w = vertices[vertex_c_index-2],vertices[vertex_c_index-1],vertices[vertex_c_index],1
-
-            -- transform_A
-                --model transform
-            vertex_a_x,vertex_a_y,vertex_a_z,vertex_a_w =
-                vertex_a_x*model_transform[1]+vertex_a_y*model_transform[5]+vertex_a_z*model_transform[9] +vertex_a_w*model_transform[13],
-                vertex_a_x*model_transform[2]+vertex_a_y*model_transform[6]+vertex_a_z*model_transform[10]+vertex_a_w*model_transform[14],
-                vertex_a_x*model_transform[3]+vertex_a_y*model_transform[7]+vertex_a_z*model_transform[11]+vertex_a_w*model_transform[15],
-                vertex_a_x*model_transform[4]+vertex_a_y*model_transform[8]+vertex_a_z*model_transform[12]+vertex_a_w*model_transform[16]
-
-            -- transform_B
-                --model transform
-            vertex_b_x,vertex_b_y,vertex_b_z,vertex_b_w = 
-                vertex_b_x*model_transform[1]+vertex_b_y*model_transform[5]+vertex_b_z*model_transform[9] +vertex_b_w*model_transform[13],
-                vertex_b_x*model_transform[2]+vertex_b_y*model_transform[6]+vertex_b_z*model_transform[10]+vertex_b_w*model_transform[14],
-                vertex_b_x*model_transform[3]+vertex_b_y*model_transform[7]+vertex_b_z*model_transform[11]+vertex_b_w*model_transform[15],
-                vertex_b_x*model_transform[4]+vertex_b_y*model_transform[8]+vertex_b_z*model_transform[12]+vertex_b_w*model_transform[16]
-
-            -- transform_C
-                --model transform
-            vertex_c_x,vertex_c_y,vertex_c_z,vertex_c_w =
-                vertex_c_x*model_transform[1]+vertex_c_y*model_transform[5]+vertex_c_z*model_transform[9] +vertex_c_w*model_transform[13],
-                vertex_c_x*model_transform[2]+vertex_c_y*model_transform[6]+vertex_c_z*model_transform[10]+vertex_c_w*model_transform[14],
-                vertex_c_x*model_transform[3]+vertex_c_y*model_transform[7]+vertex_c_z*model_transform[11]+vertex_c_w*model_transform[15],
-                vertex_c_x*model_transform[4]+vertex_c_y*model_transform[8]+vertex_c_z*model_transform[12]+vertex_c_w*model_transform[16]
-            
-                --camera transform
-            if cam_transform then
-                --custom camera transform
-                    -- A
-                vertex_a_x,vertex_a_y,vertex_a_z,vertex_a_w =
-                    vertex_a_x*cam_transform[1]+vertex_a_y*cam_transform[5]+vertex_a_z*cam_transform[9] +vertex_a_w*cam_transform[13],
-                    vertex_a_x*cam_transform[2]+vertex_a_y*cam_transform[6]+vertex_a_z*cam_transform[10]+vertex_a_w*cam_transform[14],
-                    vertex_a_x*cam_transform[3]+vertex_a_y*cam_transform[7]+vertex_a_z*cam_transform[11]+vertex_a_w*cam_transform[15],
-                    vertex_a_x*cam_transform[4]+vertex_a_y*cam_transform[8]+vertex_a_z*cam_transform[12]+vertex_a_w*cam_transform[16]
-                    -- B
-                vertex_b_x,vertex_b_y,vertex_b_z,vertex_b_w = 
-                    vertex_b_x*cam_transform[1]+vertex_b_y*cam_transform[5]+vertex_b_z*cam_transform[9] +vertex_b_w*cam_transform[13],
-                    vertex_b_x*cam_transform[2]+vertex_b_y*cam_transform[6]+vertex_b_z*cam_transform[10]+vertex_b_w*cam_transform[14],
-                    vertex_b_x*cam_transform[3]+vertex_b_y*cam_transform[7]+vertex_b_z*cam_transform[11]+vertex_b_w*cam_transform[15],
-                    vertex_b_x*cam_transform[4]+vertex_b_y*cam_transform[8]+vertex_b_z*cam_transform[12]+vertex_b_w*cam_transform[16]
-                    -- C
-                vertex_c_x,vertex_c_y,vertex_c_z,vertex_c_w =
-                    vertex_c_x*cam_transform[1]+vertex_c_y*cam_transform[5]+vertex_c_z*cam_transform[9] +vertex_c_w*cam_transform[13],
-                    vertex_c_x*cam_transform[2]+vertex_c_y*cam_transform[6]+vertex_c_z*cam_transform[10]+vertex_c_w*cam_transform[14],
-                    vertex_c_x*cam_transform[3]+vertex_c_y*cam_transform[7]+vertex_c_z*cam_transform[11]+vertex_c_w*cam_transform[15],
-                    vertex_c_x*cam_transform[4]+vertex_c_y*cam_transform[8]+vertex_c_z*cam_transform[12]+vertex_c_w*cam_transform[16]
-            else
-                --camera position
-                    -- A
-                vertex_a_x,vertex_a_y,vertex_a_z,vertex_a_w =
-                    vertex_a_x*cam_position[1]+vertex_a_y*cam_position[5]+vertex_a_z*cam_position[9] +vertex_a_w*cam_position[13],
-                    vertex_a_x*cam_position[2]+vertex_a_y*cam_position[6]+vertex_a_z*cam_position[10]+vertex_a_w*cam_position[14],
-                    vertex_a_x*cam_position[3]+vertex_a_y*cam_position[7]+vertex_a_z*cam_position[11]+vertex_a_w*cam_position[15],
-                    vertex_a_x*cam_position[4]+vertex_a_y*cam_position[8]+vertex_a_z*cam_position[12]+vertex_a_w*cam_position[16]
-                    -- B
-                vertex_b_x,vertex_b_y,vertex_b_z,vertex_b_w = 
-                    vertex_b_x*cam_position[1]+vertex_b_y*cam_position[5]+vertex_b_z*cam_position[9] +vertex_b_w*cam_position[13],
-                    vertex_b_x*cam_position[2]+vertex_b_y*cam_position[6]+vertex_b_z*cam_position[10]+vertex_b_w*cam_position[14],
-                    vertex_b_x*cam_position[3]+vertex_b_y*cam_position[7]+vertex_b_z*cam_position[11]+vertex_b_w*cam_position[15],
-                    vertex_b_x*cam_position[4]+vertex_b_y*cam_position[8]+vertex_b_z*cam_position[12]+vertex_b_w*cam_position[16]
-                    -- C
-                vertex_c_x,vertex_c_y,vertex_c_z,vertex_c_w =
-                    vertex_c_x*cam_position[1]+vertex_c_y*cam_position[5]+vertex_c_z*cam_position[9] +vertex_c_w*cam_position[13],
-                    vertex_c_x*cam_position[2]+vertex_c_y*cam_position[6]+vertex_c_z*cam_position[10]+vertex_c_w*cam_position[14],
-                    vertex_c_x*cam_position[3]+vertex_c_y*cam_position[7]+vertex_c_z*cam_position[11]+vertex_c_w*cam_position[15],
-                    vertex_c_x*cam_position[4]+vertex_c_y*cam_position[8]+vertex_c_z*cam_position[12]+vertex_c_w*cam_position[16]
-
-                --camera rotation
-                    -- A
-                vertex_a_x,vertex_a_y,vertex_a_z,vertex_a_w =
-                    vertex_a_x*cam_rotation[1]+vertex_a_y*cam_rotation[5]+vertex_a_z*cam_rotation[9] +vertex_a_w*cam_rotation[13],
-                    vertex_a_x*cam_rotation[2]+vertex_a_y*cam_rotation[6]+vertex_a_z*cam_rotation[10]+vertex_a_w*cam_rotation[14],
-                    vertex_a_x*cam_rotation[3]+vertex_a_y*cam_rotation[7]+vertex_a_z*cam_rotation[11]+vertex_a_w*cam_rotation[15],
-                    vertex_a_x*cam_rotation[4]+vertex_a_y*cam_rotation[8]+vertex_a_z*cam_rotation[12]+vertex_a_w*cam_rotation[16]
-                    -- B
-                vertex_b_x,vertex_b_y,vertex_b_z,vertex_b_w = 
-                    vertex_b_x*cam_rotation[1]+vertex_b_y*cam_rotation[5]+vertex_b_z*cam_rotation[9] +vertex_b_w*cam_rotation[13],
-                    vertex_b_x*cam_rotation[2]+vertex_b_y*cam_rotation[6]+vertex_b_z*cam_rotation[10]+vertex_b_w*cam_rotation[14],
-                    vertex_b_x*cam_rotation[3]+vertex_b_y*cam_rotation[7]+vertex_b_z*cam_rotation[11]+vertex_b_w*cam_rotation[15],
-                    vertex_b_x*cam_rotation[4]+vertex_b_y*cam_rotation[8]+vertex_b_z*cam_rotation[12]+vertex_b_w*cam_rotation[16]
-                    -- C
-                vertex_c_x,vertex_c_y,vertex_c_z,vertex_c_w =
-                    vertex_c_x*cam_rotation[1]+vertex_c_y*cam_rotation[5]+vertex_c_z*cam_rotation[9] +vertex_c_w*cam_rotation[13],
-                    vertex_c_x*cam_rotation[2]+vertex_c_y*cam_rotation[6]+vertex_c_z*cam_rotation[10]+vertex_c_w*cam_rotation[14],
-                    vertex_c_x*cam_rotation[3]+vertex_c_y*cam_rotation[7]+vertex_c_z*cam_rotation[11]+vertex_c_w*cam_rotation[15],
-                    vertex_c_x*cam_rotation[4]+vertex_c_y*cam_rotation[8]+vertex_c_z*cam_rotation[12]+vertex_c_w*cam_rotation[16]
-            end
-
-            --perspective
-                -- A
-            vertex_a_x,vertex_a_y,vertex_a_z,vertex_a_w =
-                vertex_a_x*matrix_perspective[1]+vertex_a_y*matrix_perspective[5]+vertex_a_z*matrix_perspective[9] +vertex_a_w*matrix_perspective[13],
-                vertex_a_x*matrix_perspective[2]+vertex_a_y*matrix_perspective[6]+vertex_a_z*matrix_perspective[10]+vertex_a_w*matrix_perspective[14],
-                vertex_a_x*matrix_perspective[3]+vertex_a_y*matrix_perspective[7]+vertex_a_z*matrix_perspective[11]+vertex_a_w*matrix_perspective[15],
-                vertex_a_x*matrix_perspective[4]+vertex_a_y*matrix_perspective[8]+vertex_a_z*matrix_perspective[12]+vertex_a_w*matrix_perspective[16]
-                -- B
-            vertex_b_x,vertex_b_y,vertex_b_z,vertex_b_w = 
-                vertex_b_x*matrix_perspective[1]+vertex_b_y*matrix_perspective[5]+vertex_b_z*matrix_perspective[9] +vertex_b_w*matrix_perspective[13],
-                vertex_b_x*matrix_perspective[2]+vertex_b_y*matrix_perspective[6]+vertex_b_z*matrix_perspective[10]+vertex_b_w*matrix_perspective[14],
-                vertex_b_x*matrix_perspective[3]+vertex_b_y*matrix_perspective[7]+vertex_b_z*matrix_perspective[11]+vertex_b_w*matrix_perspective[15],
-                vertex_b_x*matrix_perspective[4]+vertex_b_y*matrix_perspective[8]+vertex_b_z*matrix_perspective[12]+vertex_b_w*matrix_perspective[16]
-                -- C
-            vertex_c_x,vertex_c_y,vertex_c_z,vertex_c_w =
-                vertex_c_x*matrix_perspective[1]+vertex_c_y*matrix_perspective[5]+vertex_c_z*matrix_perspective[9] +vertex_c_w*matrix_perspective[13],
-                vertex_c_x*matrix_perspective[2]+vertex_c_y*matrix_perspective[6]+vertex_c_z*matrix_perspective[10]+vertex_c_w*matrix_perspective[14],
-                vertex_c_x*matrix_perspective[3]+vertex_c_y*matrix_perspective[7]+vertex_c_z*matrix_perspective[11]+vertex_c_w*matrix_perspective[15],
-                vertex_c_x*matrix_perspective[4]+vertex_c_y*matrix_perspective[8]+vertex_c_z*matrix_perspective[12]+vertex_c_w*matrix_perspective[16]
-
-            --transformation into NDC space
-                -- A
-            local vertex_a_w_inverse = 1/vertex_a_w
-            vertex_a_x = ( vertex_a_x*vertex_a_w_inverse+1)*w/2
-            vertex_a_y = (-vertex_a_y*vertex_a_w_inverse+1)*h/2
-            vertex_a_z = vertex_a_w_inverse
-            vertex_a_w = vertex_a_w
-                -- B
-            local vertex_b_w_inverse = 1/vertex_b_w
-            vertex_b_x = ( vertex_b_x*vertex_b_w_inverse+1)*w/2
-            vertex_b_y = (-vertex_b_y*vertex_b_w_inverse+1)*h/2
-            vertex_b_z = vertex_b_w_inverse
-            vertex_b_w = vertex_b_w
-                -- C
-            local vertex_c_w_inverse = 1/vertex_c_w
-            vertex_c_x = ( vertex_c_x*vertex_c_w_inverse+1)*w/2
-            vertex_c_y = (-vertex_c_y*vertex_c_w_inverse+1)*h/2
-            vertex_c_z = vertex_c_w_inverse
-            vertex_c_w = vertex_c_w
-
-            -- draw
-
-                -- height sort
-            if vertex_a_y > vertex_c_y then
-                vertex_a_x,vertex_c_x = vertex_c_x,vertex_a_x
-                vertex_a_y,vertex_c_y = vertex_c_y,vertex_a_y
-                vertex_a_z,vertex_c_z = vertex_c_z,vertex_a_z
-                vertex_a_w,vertex_c_w = vertex_c_w,vertex_a_w
-            end
-            if vertex_a_y > vertex_b_y then
-                vertex_a_x,vertex_b_x = vertex_b_x,vertex_a_x
-                vertex_a_y,vertex_b_y = vertex_b_y,vertex_a_y
-                vertex_a_z,vertex_b_z = vertex_b_z,vertex_a_z
-                vertex_a_w,vertex_b_w = vertex_b_w,vertex_a_w
-            end
-            if vertex_b_y > vertex_c_y then
-                vertex_c_x,vertex_b_x = vertex_b_x,vertex_c_x
-                vertex_c_y,vertex_b_y = vertex_b_y,vertex_c_y
-                vertex_c_z,vertex_b_z = vertex_b_z,vertex_c_z
-                vertex_c_w,vertex_b_w = vertex_b_w,vertex_c_w
-            end
-
-            -- split point interpolation
-            local split_alpha   = (vertex_b_y-vertex_a_y)/(vertex_c_y-vertex_a_y)
-            local right_point_x = (1-split_alpha)*vertex_a_x + split_alpha*vertex_c_x
-            local right_point_y = (1-split_alpha)*vertex_a_y + split_alpha*vertex_c_y
-            local right_point_z = (1-split_alpha)*vertex_a_z + split_alpha*vertex_c_z
-            local right_point_w = (1-split_alpha)*vertex_a_w + split_alpha*vertex_c_w
-
-            local left_point_x = vertex_b_x
-            local left_point_y = vertex_b_y
-            local left_point_z = vertex_b_z
-            local left_point_w = right_point_w
-
-            -- left-right point sort
-            if left_point_x > right_point_x then
-                left_point_x,right_point_x = right_point_x,left_point_x
-                left_point_y,right_point_y = right_point_y,left_point_y
-                left_point_z,right_point_z = right_point_z,left_point_z
-                left_point_w,right_point_w = right_point_w,left_point_w
-            end
-
-            local delta_left_top  = 1/((left_point_y -vertex_a_y)/(left_point_x -vertex_a_x))
-            local delta_right_top = 1/((right_point_y-vertex_a_y)/(right_point_x-vertex_a_x))
-
-            local delta_left_bottom  = 1/((left_point_y -vertex_c_y)/(left_point_x -vertex_c_x))
-            local delta_right_bottom = 1/((right_point_y-vertex_c_y)/(right_point_x-vertex_c_x))
-
-            -- flat bottom
-            local offset_top    = FLOOR(vertex_a_y+0.5) + 0.5 - vertex_a_y
-            local offset_bottom = FLOOR(vertex_b_y+0.5) + 0.5 - left_point_y
-
-            local x_left,x_right = vertex_a_x + delta_left_top * offset_top,vertex_a_x + delta_right_top * offset_top
-
-            if delta_left_top then
-                for y=FLOOR(vertex_a_y+0.5),FLOOR(vertex_b_y+0.5)-1 do
-
-                    for x=CEIL(x_left-0.5),CEIL(x_right-0.5)-1 do
-                        local div    = ((left_point_y -right_point_y) *(vertex_a_x-right_point_x) + (right_point_x-left_point_x) *(vertex_a_y-right_point_y))
-                        local bary_a = ((left_point_y -right_point_y) *(x         -right_point_x) + (right_point_x-left_point_x) *(y-right_point_y)) / div
-                        local bary_b = ((right_point_y-vertex_a_y    )*(x         -right_point_x) + (vertex_a_x   -right_point_x)*(y-right_point_y)) / div
-                        local bary_c = 1-bary_a-bary_b
-
-                        local depth = vertex_a_z*bary_a+left_point_z*bary_b+right_point_z*bary_c
-
-                        pixel_draw(x,y,depth,(i+2)/3)
-                    end
-                    
-                    x_left,x_right = x_left+delta_left_top,x_right+delta_right_top
-                end
-            end
-
-
-            -- flat top
-            x_left,x_right = left_point_x + delta_left_bottom * offset_bottom,right_point_x + delta_right_bottom * offset_bottom
-            if delta_left_bottom then
-                for y=FLOOR(vertex_b_y+0.5),CEIL(vertex_c_y-0.5) do
-
-                    for x=CEIL(x_left-0.5),CEIL(x_right-0.5)-1 do
-                        local div    = ((right_point_y-vertex_c_y)  *(left_point_x-vertex_c_x) + (vertex_c_x  -right_point_x)*(left_point_y-vertex_c_y))
-                        local bary_a = ((right_point_y-vertex_c_y)  *(x           -vertex_c_x) + (vertex_c_x  -right_point_x)*(y-vertex_c_y)) / div
-                        local bary_b = ((vertex_c_y   -left_point_y)*(x           -vertex_c_x) + (left_point_x-vertex_c_x)   *(y-vertex_c_y)) / div
-                        local bary_c = 1-bary_a-bary_b
-
-                        local depth = left_point_z*bary_a+right_point_z*bary_b+vertex_c_z*bary_c
-
-                        pixel_draw(x,y,depth,(i+2)/3)
-                    end
-
-                    x_left,x_right = x_left+delta_left_bottom,x_right+delta_right_bottom
-                end
-            end
-        end
     end
 end
 
@@ -259,7 +28,7 @@ return {add=function(BUS)
             local base = build_pipeline()
             pipeline_object:set_entry(c3d.registry.entry("render"),base)
 
-            pipeline_object:constructor(function(id_override)
+            pipeline_object:constructor(function(layout,id_override)
                 local id = id_override or utils.uuid4()
                 local object = {id=id}
 
diff --git a/core/objects/scene_object.lua b/core/objects/scene_object.lua
index f32151e..d28d09b 100644
--- a/core/objects/scene_object.lua
+++ b/core/objects/scene_object.lua
@@ -78,9 +78,9 @@ return {add=function(BUS)
                 local id = generic.uuid4()
 
                 local geometry_properties = {
-                    scale_mat   =scale_matrice(1,1,1),
-                    rotation_mat=euler_rot_matrice(0,0,0),
-                    pos_mat     =trans_matrice(0,0,0)
+                    scale_mat    = scale_matrice(1,1,1),
+                    rotation_mat = euler_rot_matrice(0,0,0),
+                    pos_mat      = trans_matrice(0,0,0)
                 }
 
                 geometry.properties = geometry_properties
diff --git a/core/objects/vertex_attribute.lua b/core/objects/vertex_attribute.lua
new file mode 100644
index 0000000..e69de29
diff --git a/lib/tampl.lua b/lib/tampl.lua
new file mode 100644
index 0000000..243caf3
--- /dev/null
+++ b/lib/tampl.lua
@@ -0,0 +1,443 @@
+local TEMPLATE_TYPE = {}
+
+local function lookupify(tbl)
+    local lookup = {}
+    for k,v in pairs(tbl) do lookup[v] = k end
+    return lookup
+end
+
+local function combined_lookup(a,b)
+    local lookup = {}
+    for k,v in pairs(b) do lookup[a[k]] = v end
+    return lookup
+end
+
+local keywords = {
+    "and",   "break", "do",  "else",    "elseif",
+    "end",   "false", "for", "function","if",
+    "in",    "local", "nil", "not",     "or",
+    "repeat","return","then","true",    "until","while"
+}
+
+local lua_tokens = {
+    "+", "-", "*", "/", "%", "^","#",
+    "==","~=","<=",">=","<", ">","=",
+    "(", ")", "{", "}", "[", "]",
+    ";", ":", ",", ".", "..","..."
+}
+
+local keyword_value_proccessor = {
+    value={
+        ["true"] =function() return true  end,
+        ["false"]=function() return false end,
+        ["nil"]  =function() return nil   end
+    },
+}
+
+local expansible_tokens = {
+    ["="]   ="=",
+    ["=="]  ="=",
+    ["~"]   ="=",
+    ["~="]  ="=",
+    ["<"]   ="=",
+    ["<="]  ="=",
+    [">"]   ="=",
+    [">="]  ="=",
+    ["."]   =".",
+    [".."]  =".",
+    ["..."] ="",
+    ["-"]   ="-",
+    ["--"]  ="[",
+    ["["]   ="[",
+    ["[["]  ="[",
+    ["]"]   ="]",
+    ["]]"]  ="]",
+    ["--["] ="[",
+    ["--[["]="["
+}
+
+local scope = {
+    open_begin = lookupify{
+        "if","elseif","while","for"
+    },
+    open = lookupify{
+        "do","else","then","function","repeat"
+    },
+    close = lookupify{
+        "end","elseif","else","until"
+    }
+}
+
+local positioning_types = {
+    "HEAD","TAIL","THIS"
+}
+local positioning_handles = {
+    function(tree,position,type,simple_override,tail_handle)
+        if not simple_override then
+            local tree_size = #tree
+            for i=tree_size,position,-1 do
+                local val = tree[i]
+
+                local hook = val.hook_info
+                if hook then hook.index = hook.index + 1 end
+
+                tree[i+1] = val
+            end
+        end
+
+        tree[position] = type
+    end,
+    function(tree,position,type,simple_override,tail_handle)
+        if not simple_override then
+            local tree_size = #tree
+            for i=tree_size,position,-1 do
+                local val = tree[i]
+
+                local hook = val.hook_info
+                if hook then hook.index = hook.index + 1 end
+
+                tree[i+1] = val
+            end
+        end
+
+        tree[position+(tail_handle or 0)] = type
+    end,
+    function(tree,position,type,tail_handle)
+        tree[position] = type
+    end
+}
+
+local positioning_offsets = {
+    0,1,1
+}
+
+local hook_types = {
+    "#","$","="
+}
+local hook_type_handles = {
+    function(tree,position,type,positioning)
+        positioning(tree,position,type)
+    end,
+    function(tree,position,type,positioning)
+        positioning(tree,position-1,type,true)
+    end,
+    function(tree,position,type,positioning)
+        positioning(tree,position-1,type,true,1)
+    end
+}
+
+local hooks              = combined_lookup(hook_types,hook_type_handles)
+local relative_positions = combined_lookup(positioning_types,positioning_handles)
+local relative_offsets   = combined_lookup(positioning_types,positioning_offsets)
+
+local keyword_lookup = lookupify(keywords)
+local token_lookup   = lookupify(lua_tokens)
+
+local function generate_tokens(str)
+    str = str .. "\0"
+    local tokens = {}
+    local token = ""
+
+    local is_string   = false
+    local is_number   = false
+    local is_comment  = false
+    local is_mulline  = false
+    local escape_next = false
+
+    local can_expand = ""
+
+    for i=1,#str-1 do
+        local char      = str:sub(i,i)
+        local next_char = str:sub(i+1,i+1)
+
+        if (char == "\'" or char == "\"") and not is_comment then
+            if not escape_next then is_string = not is_string end
+        end
+        if char == "\\" then
+            escape_next = true
+        end
+        if char == "\n" and not is_mulline then is_string,is_comment,is_number = false,false,false end
+
+        if not is_string and (char:match("%d") or (char == "." and next_char:match("%d"))) then
+            is_number = true
+        elseif char ~= "." then
+            is_number = false
+        end
+
+        if char:match("[%s\t]") and not is_string and not is_comment and not is_number then
+            if token ~= "" then tokens[#tokens+1] = token end
+            token = ""
+        elseif token_lookup[char] and not is_string and not is_number and not is_comment then
+            if token ~= "" then tokens[#tokens+1] = token end
+            
+            if not expansible_tokens[char] then
+                tokens[#tokens+1] = char
+            end
+
+            token = ""
+        elseif not expansible_tokens[char] or is_string or is_number or is_comment then
+            token = token .. char
+            escape_next = false
+        end
+
+        if (((expansible_tokens[can_expand] == char) or (can_expand == "" and expansible_tokens[char]))) and not is_number then
+            can_expand = can_expand .. char
+            if not expansible_tokens[can_expand .. next_char] then
+                if can_expand == "--" and not is_string and not is_number and not is_comment then
+                    token = token .. "--"
+                    is_comment = true
+                elseif (can_expand == "[[" or can_expand == "--[[") and not is_string and not is_number and not is_comment then
+                    token = token .. can_expand
+                    if can_expand == "--[[" and not escape_next then
+                        is_comment = true
+                    elseif can_expand == "[[" and not escape_next then
+                        is_string  = true
+                    end
+                    is_mulline = true
+                elseif can_expand == "]]" and is_mulline and not escape_next then
+                    tokens[#tokens+1] = token
+                    token = ""
+                    is_mulline,is_string,is_comment,is_number = false,false,false,false
+                elseif not is_string and not is_number and not is_comment then
+                    tokens[#tokens+1] = can_expand
+                end
+                can_expand = ""
+            end
+        end
+    end
+
+    if token ~= "" then tokens[#tokens+1] = token end
+
+    return tokens
+end
+
+local function make_value(token,token_buffer,token_index)
+    local out
+    if keyword_lookup[token] then
+        local keyword_type = keyword_lookup[token]
+        if keyword_type and keyword_value_proccessor[keyword_type] then
+            out = keyword_value_proccessor[keyword_type][token](token_buffer,token_index)
+        end
+    elseif token_lookup[token] then
+        out = "lua_token"
+    elseif token:match("^%-%-")    or token:match("^%-%-%[%[.+%]%]$") then
+        out = token:match("^%-%-%[%[(.+)%]%]$") or token:match("^%-%-(.+)")
+    elseif token:match("^\".+\"$") or token:match("^%[%[.+%]%]$") then
+        out = token:match("^%[%[(.+)%]%]$") or token:match("^\"(.+)\"$")
+    elseif token:match("(%d*%.?%d+)") then
+        out = tonumber(token)
+    else out = token end
+    
+    return out
+end
+
+local function make_type(token)
+    local out
+    local keyword_type
+    if keyword_lookup[token] then
+        out = "lua_keyword"
+        keyword_type = keyword_lookup[token]
+    elseif token_lookup[token] then
+        out = "lua_token"
+    elseif token:match("^%-%-")    or token:match("^%-%-%[%[.+%]%]$") then
+        out = "comment"
+    elseif token:match("^\".+\"$") or token:match("^%[%[.+%]%]$") then
+        out = "string"
+    elseif token:match("(%d*%.?%d+)") then
+        out = "number"
+    else out = "name" end
+
+    return out,keyword_type
+end
+
+local TOKEN_MT = {__tostring=function(self) return "TOKEN: " .. self.type  end}
+local SCOPE_MT = {__tostring=function(self) return "SCOPE: " .. self.index end}
+
+local function parse_token(out,token,token_buffer,token_index)
+    out.entry  = "token"
+    out.name   = token
+
+    out.type,out.keyword_type = make_type (token)
+    out.value                 = make_value(token,token_buffer,token_index)
+
+    setmetatable(out,TOKEN_MT)
+
+    return out
+end
+
+local function generate_extra_hook_info(t)
+    local hook = t.scope[t.index]
+    hook.hook_info = t
+
+    t.hook_comment = hook
+    t.name = hook.value:match("^.(.+)")
+    t.type = hook.value:match("^.")
+
+    return t
+end
+
+local function find_hooks(tree,lst)
+    lst = lst or {}
+    for k,v in ipairs(tree) do
+        if v.entry == "scope" then
+            find_hooks(v,lst)
+        elseif v.type == "comment" then
+            local new_index = #lst+1
+            local new = generate_extra_hook_info{scope=tree,index=k,hook_index=new_index}
+            if hooks[new.type] then
+                lst[new_index] = new
+            end
+        end
+    end
+
+    return lst
+end
+
+local function generate_code_tree(tokens)
+    local current_scope = {}
+
+    local token_buffer = {}
+    local buffer_open  = false
+
+    local scope_index = 0
+
+    for i=1,#tokens do
+        local current_token = tokens[i]
+
+        if scope.open_begin[current_token] then
+            buffer_open = true
+        end
+        if buffer_open then
+            token_buffer[#token_buffer+1] = current_token
+        end
+
+        if scope.close[current_token] then
+            current_scope = current_scope.parent
+        end
+
+        current_scope[#current_scope+1] = parse_token({},current_token,t,i)
+        
+        if scope.open[current_token] then
+
+            scope_index = scope_index + 1
+
+            local new_scope = setmetatable({
+                index = scope_index,
+                parent  = current_scope,
+                keyword = current_token,
+                entry   = "scope"
+            },SCOPE_MT)
+
+            token_buffer = {}
+            buffer_open = false
+
+            current_scope[#current_scope+1] = new_scope
+
+            current_scope = new_scope
+        end
+    end
+
+    return current_scope
+end
+
+local function load_template_tree(tree)
+    local template_hooks = find_hooks(tree)
+
+    local object;object = {
+        inject=function(hook_list,position,code)
+            local code_tree      = code
+            local rebuild_on_end = false
+
+            if type(hook_list) ~= "table" then
+                error("Invalid hook",2)
+            end
+            if type(code_tree) == "table" and code_tree.type == TEMPLATE_TYPE then
+                code_tree      = code.tree
+                rebuild_on_end = true
+            end
+
+            for k,hook in ipairs(hook_list) do
+                local scope = hook.scope
+                for k,v in ipairs(code_tree) do
+                    hooks[hook.type](scope,hook.index+k*position.offset,v,position.pos)
+                end
+            end
+
+            if rebuild_on_end then object.rebuild() end
+            return object
+        end,
+        construct=function(input)
+            local code = ""
+        
+            for k,v in ipairs(input or tree) do
+                if v.entry == "scope" then
+                    code = code .. object.construct(v) .. "\n"
+                else
+                    code = code .. v.name .. (v.type == "comment" and "\n" or " ")
+                end
+            end
+        
+            return code
+        end,
+        rebuild = function()
+            local reconstructed = load_template_tree(tree)
+
+            for k,v in pairs(reconstructed) do
+                object[k] = v
+            end
+
+            return reconstructed
+        end,
+        tree = tree,
+        type = TEMPLATE_TYPE
+    }
+
+    for k,v in pairs(template_hooks) do
+        local index_name = ("_%s"):format(v.name)
+
+        if not object[index_name] then object[index_name] = {} end
+        local hook_named = object[index_name]
+        
+        hook_named[#hook_named+1] = v
+    end
+
+    return object
+end
+
+local function load_template_tokens(tokens)
+    return load_template_tree(generate_code_tree(tokens))
+end
+
+local function load_template(data)
+    return load_template_tokens(generate_tokens(data))
+end
+
+
+local function load_template_file(path)
+    local file = fs.open(path,"r")
+    local data = file.readAll()
+
+    file.close()
+
+    return load_template_tokens(generate_tokens(data))
+end
+
+local function parse_code_block(data)
+    local tokens = generate_tokens   (data)
+    local tree   = generate_code_tree(tokens)
+
+    return tree
+end
+
+local function inject_table_position(tp)
+    return {pos=relative_positions[tp],offset=relative_offsets[tp]}
+end
+
+return {
+    new         = load_template,
+    from_file   = load_template_file,
+    from_tokens = load_template_tokens,
+    from_tree   = load_template_tree,
+    parse       = parse_code_block,
+    At          = inject_table_position
+}
\ No newline at end of file
diff --git a/modules/geometry.lua b/modules/geometry.lua
index f5be634..438cad5 100644
--- a/modules/geometry.lua
+++ b/modules/geometry.lua
@@ -117,10 +117,6 @@ return function(BUS)
                     }
                 }
             end)
-
-            geometry_module:set_entry(c3d.registry.entry("load_model"),function(path)
-                return BUS.object.imported_model.new(path)
-            end)
         end
 
         geometry:register()
diff --git a/modules/model.lua b/modules/model.lua
new file mode 100644
index 0000000..886af07
--- /dev/null
+++ b/modules/model.lua
@@ -0,0 +1,73 @@
+local object = require("core.object")
+
+local strings = require("common.string_util")
+
+return function(BUS)
+    return function()
+        local model = plugin.new("c3d:module->model")
+
+        local objects = {
+            mapper={__index=object.new{
+                apply=function(self,model)
+                    local output = {}
+
+                    local dataset = model[self.dataset_name]
+                    local index   = model[self.index_name]
+    
+                    local group_count = #index/self.group_size
+    
+                    for group_index=1,group_count do
+                        local current_group = {}
+                        output[group_index] = current_group
+    
+                        local index_position = (group_index-1)*self.group_size+1
+                        for i=1,self.group_size do
+                            local index_location = index_position+i-1
+                            local index_data     = index  [index_location]
+                            current_group[i]     = dataset[index_data]
+                        end
+                    end
+    
+                    return output
+                end
+            },__tostring=function(self) return "model_mapper"..strings.format_table__tostring(self) end},
+            provider={__index=object.new{
+                apply=function(self,model)
+                    local output     = {}
+                    local model_data = model[self.source]
+
+                    for i=1,#model_data/self.partition_size do
+                        output[i] = i
+                    end
+
+                    return output
+                end
+            },__tostring=function(self) return "model_key_provider"..strings.format_table__tostring(self) end}
+        }
+
+        function model.register_modules()
+            local module_registry = c3d.registry.get_module_registry()
+            local geometry_module = module_registry:new_entry("model")
+
+            geometry_module:set_entry(c3d.registry.entry("load"),function(path)
+                return BUS.object.imported_model.new(path)
+            end)
+
+            geometry_module:set_entry(c3d.registry.entry("map"),function(dataset,index)
+                return setmetatable({
+                    dataset_name = dataset,
+                    index_name   = index
+                },objects.mapper):__build()
+            end)
+
+            geometry_module:set_entry(c3d.registry.entry("provide"),function(source,partition_size)
+                return setmetatable({
+                    source         = source,
+                    partition_size = partition_size
+                },objects.provider):__build()
+            end)
+        end
+
+        model:register()
+    end
+end
\ No newline at end of file
diff --git a/modules/pipe.lua b/modules/pipeline.lua
similarity index 61%
rename from modules/pipe.lua
rename to modules/pipeline.lua
index 736ef8f..6c50726 100644
--- a/modules/pipe.lua
+++ b/modules/pipeline.lua
@@ -1,15 +1,20 @@
 return function(BUS)
 
     return function()
-        local pipe = plugin.new("c3d:module->pipe")
+        local pipe = plugin.new("c3d:module->pipeline")
 
         function pipe.on_init_finish()
+            local base_layout = BUS.object.layout()
+                :add_vertex_attribute("position",3,BUS.c3d.model.map    ("vertices","tris"))
+                :add_face_attribute  ("id",      1,BUS.c3d.model.provide("tris"           ))
+            :generate()
+
             BUS.pipe.default = BUS.object.pipeline.new(BUS.pipe.default.id)
         end
         
         function pipe.register_modules()
             local module_registry = c3d.registry.get_module_registry()
-            local pipe_module     = module_registry:new_entry("pipe")
+            local pipe_module     = module_registry:new_entry("pipeline")
 
             pipe_module:set_entry(c3d.registry.entry("new"),function(...)
                 BUS.object.pipeline.new(...)
